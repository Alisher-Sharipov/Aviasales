#Область ПроцедураПодпискиНаЗаписьБилета

// Процедура записи в регистр сведений "Журнал обработанных документов" вызывается из подписки на событие "ПриЗаписиБилета"
// 
// Параметры:
// 	Источник - СправочникОбъект.Билет - Описание
// 	Отказ - Булево - Описание
Процедура ПриЗаписиБилетаПриЗаписи(Источник, Отказ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЖурналОбработанныхБилетов.Билет.Ссылка КАК БилетСсылка
		|ИЗ
		|	РегистрСведений.ЖурналОбработанныхБилетов КАК ЖурналОбработанныхБилетов
		|ГДЕ
		|	ЖурналОбработанныхБилетов.Билет.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Если Источник.ПометкаУдаления = Истина Тогда
			Запись = РегистрыСведений.ЖурналОбработанныхБилетов.СоздатьНаборЗаписей();
			Запись.Отбор.Билет.Установить(Источник.Ссылка);
			Запись.Записать();
		КонецЕсли;
	Иначе
		Запись = РегистрыСведений.ЖурналОбработанныхБилетов.СоздатьМенеджерЗаписи();
		Запись.Билет = Источник.Ссылка;
		Запись.Период = ТекущаяДата();
		Запись.ОбработанВПродажах = Ложь;
		Запись.Кассир = Источник.Кассир;
		Запись.Записать();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ФункцииИПроцедурыДляПроведенияДокументов

// Функция для возврата таблицы значений предназначена для заполнения таб. части документа Реализация
// 
// Параметры:
// 	Кассир
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание
Функция ВозвратТЧ(Кассир) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
		|	ЖурналОбработанныхБилетов.Билет КАК Билет
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрСведений.ЖурналОбработанныхБилетов КАК ЖурналОбработанныхБилетов
		|ГДЕ
		|	ЖурналОбработанныхБилетов.ОбработанВПродажах = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БилетРасшифровкаТекстаБилета.Ссылка КАК Билет,
		|	БилетРасшифровкаТекстаБилета.Выписан КАК Выписан,
		|	БилетРасшифровкаТекстаБилета.PNR КАК PNR,
		|	БилетРасшифровкаТекстаБилета.ДатаВылета КАК ДатаВылета,
		|	БилетРасшифровкаТекстаБилета.СтатусБилета КАК СтатусБилета,
		|	БилетРасшифровкаТекстаБилета.СуммаТарифаEUR КАК СуммаТарифаEUR,
		|	БилетРасшифровкаТекстаБилета.СуммаТарифа КАК СуммаТарифа,
		|	БилетРасшифровкаТекстаБилета.Сборы КАК Сборы,
		|	БилетРасшифровкаТекстаБилета.ИтогоСумма КАК ИтогоСумма,
		|	БилетРасшифровкаТекстаБилета.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	БилетРасшифровкаТекстаБилета.Валидатор КАК Валидатор,
		|	БилетРасшифровкаТекстаБилета.Покупатель КАК Покупатель,
		|	БилетРасшифровкаТекстаБилета.Ссылка.КодАвиакомпании КАК АВК,
		|	БилетРасшифровкаТекстаБилета.Направление КАК Направление,
		|	БилетРасшифровкаТекстаБилета.Ссылка.МаскаБилета КАК МаскаБилета
		|ИЗ
		|	Справочник.Билет.РасшифровкаТекстаБилета КАК БилетРасшифровкаТекстаБилета
		|ГДЕ
		|	БилетРасшифровкаТекстаБилета.Ссылка.Кассир = &Кассир";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Кассир", Кассир);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
КонецФункции

// Функция для поиска и возврата справочники "Пульт"
// 
// Параметры:
// 	КодПульта
// Возвращаемое значение:
// 	Неопределено - Описание
Функция НайтиПульт(КодПульта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Пульт.Владелец.Ссылка КАК ВладелецСсылка
		|ИЗ
		|	Справочник.Пульт КАК Пульт
		|ГДЕ
		|	Пульт.Код = &Код";

	Запрос.УстановитьПараметр("Код", КодПульта);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Агенство = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Агенство = ВыборкаДетальныеЗаписи.ВладелецСсылка;
	КонецЦикла;
	Возврат Агенство;
КонецФункции

// Процедура для записи в регистр сведений "Журнал обработанных документов" предназначена для документа Реализация 
// 
// Параметры:
// 	МассивДанных
// 	Операция
Процедура ОбработкаРегистраЖурнал(МассивДанных, Операция) Экспорт
	Если Операция = "Проведение" Тогда
		Для каждого Стр из МассивДанных Цикл
			Запись = РегистрыСведений.ЖурналОбработанныхБилетов.СоздатьНаборЗаписей();
			Запись.Отбор.Билет.Установить(Стр);
			НоваяЗапись = Запись.Добавить();
			НоваяЗапись.ОбработанВПродажах = Истина;
			НоваяЗапись.Билет = Стр;
			НоваяЗапись.Кассир = Стр.Кассир;
			НоваяЗапись.Период = ТекущаяДата();
			Запись.Записать();
		КонецЦикла;
	ИначеЕсли Операция = "ОтменаПроведения" Тогда
		Для каждого Стр из МассивДанных Цикл
			Запись = РегистрыСведений.ЖурналОбработанныхБилетов.СоздатьНаборЗаписей();
			Запись.Отбор.Билет.Установить(Стр);
			НоваяЗапись = Запись.Добавить();
			НоваяЗапись.ОбработанВПродажах = Ложь;
			НоваяЗапись.Билет = Стр;
			НоваяЗапись.Кассир = Стр.Кассир;
			НоваяЗапись.Период = ТекущаяДата();
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Функция для возврата детализации взаиморасчетов с авиакомпаниями
// 
// Параметры:
// 	Агенство
// 	Валюта
// 	Дата
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание
Функция ВозвратДетализацииПоВзаиморасчетам(Агенство, Валюта, Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВзаиморасчетыСАгенствамиОстаткиИОбороты.Авиакомпания КАК Авиакомпания,
		|	ВзаиморасчетыСАгенствамиОстаткиИОбороты.Билет КАК Билет,
		|	ВзаиморасчетыСАгенствамиОстаткиИОбороты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСАгенствамиОстаткиИОбороты.СуммаЗадолженностиАГНКонечныйОстаток КАК
		|		СуммаЗадолженностиАГНКонечныйОстаток,
		|	ВзаиморасчетыСАгенствамиОстаткиИОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСАгенствами.ОстаткиИОбороты(, &Дата, День,,) КАК
		|		ВзаиморасчетыСАгенствамиОстаткиИОбороты
		|ГДЕ
		|	ВзаиморасчетыСАгенствамиОстаткиИОбороты.Авиакомпания = &Авиакомпания
		|	И ВзаиморасчетыСАгенствамиОстаткиИОбороты.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов";

	Запрос.УстановитьПараметр("Авиакомпания", Агенство);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Валюта);
	Запрос.УстановитьПараметр("Дата", Дата);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса
КонецФункции

// Функция для возврата детализации взаиморасчетов с кассирами
// 
// Параметры:
// 	Кассир
// 	Дата
// 	ИсточникВызова
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание
Функция ВозвратДетализацииПоКассирам(Кассир, Дата, ИсточникВызова) Экспорт
	ТекстЗапроса1 = "ВЫБРАТЬ
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.Билет КАК Билет,
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.Субагент КАК Субагент,
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.Организация КАК Организация,
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.СуммаЗадолженностиКонечныйОстаток КАК СуммаЗадолженности
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКассирами.ОстаткиИОбороты(, &Дата, День, , ) КАК ВзаиморасчетыСКассирамиОстаткиИОбороты
		|ГДЕ
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.Субагент = &Кассир";
	ТекстЗапроса2 = "ВЫБРАТЬ
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.СуммаЗадолженностиКонечныйОстаток КАК СуммаЗадолженности
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКассирами.ОстаткиИОбороты(, &Дата, День, , ) КАК ВзаиморасчетыСКассирамиОстаткиИОбороты
		|ГДЕ
		|	ВзаиморасчетыСКассирамиОстаткиИОбороты.Субагент = &Кассир";

	Запрос = Новый Запрос;
	Если ИсточникВызова = "ПроведениеДокумента" Тогда
		Запрос.Текст = ТекстЗапроса1;
	ИначеЕсли ИсточникВызова = "МодульФормы" Тогда
		Запрос.Текст = ТекстЗапроса2;
	КонецЕсли;
	Запрос.УстановитьПараметр("Кассир", Кассир);
	Запрос.УстановитьПараметр("Дата", Дата);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
КонецФункции

// Функция для проверки на предмет наличия  ключей аналитики
// 
// Параметры:
// 	Код - Строка - Описание
// Возвращаемое значение:
// 	Булево - Описание
Функция ПроверкаНаличияКлючейАналитики(СтруктураДанных) Экспорт
	Флаг = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АналитикаНаправлений.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.АналитикаНаправлений КАК АналитикаНаправлений
	               |ГДЕ
	               |	АналитикаНаправлений.Агенство = &Агенство
	               |	И АналитикаНаправлений.АВК = &АВК
	               |	И АналитикаНаправлений.Направление = &Направление";

	Запрос.УстановитьПараметр("Агенство", СтруктураДанных.Агенство);
	Запрос.УстановитьПараметр("АВК", СтруктураДанных.АВК);
	Запрос.УстановитьПараметр("Направление", СтруктураДанных.Направление);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Флаг = Истина;
	КонецЕсли;
	Возврат Флаг;
КонецФункции

Функция ВозвратКлючейАналитики(СтруктураДанных) Экспорт
	Ключь = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АналитикаНаправлений.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.АналитикаНаправлений КАК АналитикаНаправлений
	               |ГДЕ
	               |	АналитикаНаправлений.Агенство = &Агенство
	               |	И АналитикаНаправлений.АВК = &АВК
	               |	И АналитикаНаправлений.Направление = &Направление";

	Запрос.УстановитьПараметр("Агенство", СтруктураДанных.Агенство);
    Запрос.УстановитьПараметр("АВК", СтруктураДанных.АВК);
	Запрос.УстановитьПараметр("Направление", СтруктураДанных.Направление);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Ключь=ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЦикла;
	Возврат Ключь;
КонецФункции


// Функция для возврата СуммыНДС используется в проводке документа Реализация
// 
// Параметры:
// 	Пульт
// Возвращаемое значение:
// 	ЧИСЛО - Возвращает сумму ндс
Функция ВозвратНДС(Пульт,СуммаОтАвк)  Экспорт 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Пульт.НДС = ЗНАЧЕНИЕ(Перечисление.НДС.БезНДС)
		|			ТОГДА &СуммаОтАВК
		|		ИНАЧЕ ВЫБОР
		|			КОГДА Пульт.НДС = ЗНАЧЕНИЕ(Перечисление.НДС.НДС18)
		|				ТОГДА &CуммаОтАВК * 0.18
		|		КОНЕЦ
		|	КОНЕЦ КАК СуммаНДС,
		|	Пульт.Ссылка КАК Пульт
		|ИЗ
		|	Справочник.Пульт КАК Пульт
		|ГДЕ
		|	Пульт.Ссылка = &Пульт";
	
	Запрос.УстановитьПараметр("Пульт",Пульт);
	Запрос.УстановитьПараметр("СуммаОтАвк",СуммаОтАвк );
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СуммаНДС=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СуммаНДС=ВыборкаДетальныеЗаписи.СуммаНДС;	
КонецЦикла;
Возврат СуммаНДС;
КонецФункции

// Функция  генерации ключей аналитики
// 
// Параметры:
// 	СтруктураДанных
// 	Агенство
// 	ВызывающаяСторона
Процедура РегистрацииКлючейАналитики(СтруктураДанных, Агенство,
		ВызывающаяСторона) Экспорт
	Наличие = Неопределено;
	Если ВызывающаяСторона = "ПриЗаписиСправочника" Тогда
		Для каждого СтрМассива из СтруктураДанных Цикл
			СтруктураКлюча=Новый Структура;
			СтруктураКлюча.Вставить("Агенство",Агенство);
			СтруктураКлюча.Вставить("Направление",СтрМассива.Направление);
			СтруктураКлюча.Вставить("АВК",СтрМассива.АВК);
			Наличие = ПроверкаНаличияКлючейАналитики(СтруктураКлюча);
			Если Наличие = Ложь Тогда
				Спр = Справочники.АналитикаНаправлений.СоздатьЭлемент();
				Спр.АВК = СтрМассива.АВК;
				Спр.Агенство = Агенство;
				Спр.Наименование = "Ключь";
				Спр.Направление = СтрМассива.Направление;
				Спр.Записать();
				Запись = РегистрыСведений.ПроцентОтАГН.СоздатьМенеджерЗаписи();
				Запись.АналитикаНаправлений = Спр.Ссылка;
				Запись.Период = СтрМассива.Период;
				Запись.Процент = СтрМассива.Процент;
				Запись.Записать();
			Иначе
				Ключь=ВозвратКлючейАналитики(СтруктураКлюча);
				Запись = РегистрыСведений.ПроцентОтАГН.СоздатьНаборЗаписей();
				Запись.Отбор.АналитикаНаправлений.Установить(Ключь);
				Запись.Отбор.Период.Установить(КонецДня(ТекущаяДата()));
				Запись.Прочитать();
				Если Запись.Количество() = 0 Тогда
					НоваяЗапись = РегистрыСведений.ПроцентОтАГН.СоздатьМенеджерЗаписи();
					НоваяЗапись.АналитикаНаправлений = Ключь;
					НоваяЗапись.Период = ТекущаяДата();
					НоваяЗапись.Процент = СтрМассива.Процент;
					НоваяЗапись.Записать();
				Иначе
					Сообщить("Процент можно изменять только в раз в день");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВызывающаяСторона = "ПроверкаВОбработке" Тогда
			СтруктураКлюча=Новый Структура;
			СтруктураКлюча.Вставить("Агенство",Агенство);
			СтруктураКлюча.Вставить("Направление",СтруктураДанных.Направление);
			СтруктураКлюча.Вставить("АВК",СтруктураДанных.АВК);
            Наличие = ПроверкаНаличияКлючейАналитики(СтруктураКлюча);
		Если Наличие = Ложь Тогда
			Спр = Справочники.АналитикаНаправлений.СоздатьЭлемент();
			Спр.АВК = СтруктураДанных.АВК;
			Спр.Агенство = Агенство;
			Спр.Наименование = "Ключь";
			Спр.Направление = СтруктураДанных.Направление;
			Спр.Записать();
			//	Запись=РегистрыСведений.ПроцентОтАГН.СоздатьМенеджерЗаписи();
			//	Запись.АналитикаНаправлений=Спр.Ссылка;
			//	Запись.Период=СтруктураДанных.Период;
			//	Запись.Процент=СтруктураДанных.Процент;
			//	Запись.Записать();	
			//Иначе
			//	Запись=РегистрыСведений.ПроцентОтАГН.СоздатьНаборЗаписей();
			//	Запись.Отбор.АналитикаНаправлений.Установить(Наличие.Ссылка);
			//	Запись.Отбор.Период.Установить(КонецДня(ТекущаяДата()));
			//	Запись.Прочитать();
			//	Если Запись.Количество()=0 Тогда
			//		НоваяЗапись=РегистрыСведений.ПроцентОтАГН.СоздатьМенеджерЗаписи();
			//		НоваяЗапись.АналитикаНаправлений=Наличие.Ссылка;
			//		НоваяЗапись.Период=ТекущаяДата();
			//		НоваяЗапись.Процент=СтруктураДанных.Процент;
			//		НоваяЗапись.Записать();
			//	Иначе
			//		Сообщить("Процент можно изменять только в раз в день");
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Функция для поиска и возврата агенства
// 
// Параметры:
// 	Имя
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ВозвратАгенстваПоИмени(Имя) Экспорт
	Агенство = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Агенство.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Агенство КАК Агенство
		|ГДЕ
		|	Агенство.Наименование ПОДОБНО ""%"" + &ИМЯ + ""%""";

	Запрос.УстановитьПараметр("ИМЯ", ИМЯ);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Агенство = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат Агенство;
КонецФункции

// Функция для возврата процентной ставки агенства
// 
// Параметры:
// 	КодАналитики
// 	ДатаПродажи
// Возвращаемое значение:
// 	Число - Описание
Функция ВозвратПроцентовАГН(КодАналитики, ДатаПродажи) Экспорт
	КлючьСсылка = Справочники.АналитикаНаправлений.НайтиПоКоду(КодАналитики);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроцентОтАГНСрезПоследних.Процент / 100 КАК Процент
	               |ИЗ
	               |	РегистрСведений.ПроцентОтАГН.СрезПоследних(&ДатаПродаж, ) КАК ПроцентОтАГНСрезПоследних
	               |ГДЕ
	               |	ПроцентОтАГНСрезПоследних.АналитикаНаправлений = &КлючьСсылка";

	Запрос.УстановитьПараметр("ДатаПродаж", КонецДня(ДатаПродажи));
	Запрос.УстановитьПараметр("КлючьСсылка", КлючьСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Процент = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Процент = ВыборкаДетальныеЗаписи.Процент;
	КонецЦикла;
	Возврат Процент;
КонецФункции

// Функция для возврата процентной ставки кассиров
// 
// Параметры:
// 	КодАналитики
// 	Кассир
// 	ДатаПродажи
// Возвращаемое значение:
// 	Число - Описание
Функция ВозвратПроцентовСУБ(КодАналитики, Кассир, ДатаПродажи) Экспорт
	КлючьСсылка = Справочники.АналитикаНаправлений.НайтиПоКоду(КодАналитики);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроцентДляСУБСрезПоследних.Процент / 100 КАК Процент,
	               |	ПроцентДляСУБСрезПоследних.СУБ КАК СУБ,
	               |	ПроцентДляСУБСрезПоследних.АналитикаНаправлений КАК АналитикаНаправлений
	               |ИЗ
	               |	РегистрСведений.ПроцентДляСУБ.СрезПоследних(&ДатаПродажи, ) КАК ПроцентДляСУБСрезПоследних
	               |ГДЕ
	               |	ПроцентДляСУБСрезПоследних.СУБ = &СУБ
	               |	И ПроцентДляСУБСрезПоследних.АналитикаНаправлений = &АналитикаНаправлений
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПроцентДляСУБСрезПоследних.СУБ,
	               |	ПроцентДляСУБСрезПоследних.АналитикаНаправлений,
	               |	ПроцентДляСУБСрезПоследних.Процент / 100";

	Запрос.УстановитьПараметр("ДатаПродажи", КонецДня(ДатаПродажи));
	Запрос.УстановитьПараметр("СУБ", Кассир);
	Запрос.УстановитьПараметр("АналитикаНаправлений", КлючьСсылка);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Процент = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Процент = ВыборкаДетальныеЗаписи.Процент;
	КонецЦикла;
	Возврат Процент;
КонецФункции

// Функция  для возврата таблицы значений продаж предназначена для документа Возврат
// 
// Параметры:
// 	МаскаБилета
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание
Функция ВозвратСтрокиПродаж(МаскаБилета) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ПродажиБилетов.Субагент КАК Субагент,
		|	ПродажиБилетов.Направление КАК Направление,
		|	ПродажиБилетов.НомерБилета КАК НомерБилета,
		|	ПродажиБилетов.PNR КАК PNR,
		|	ПродажиБилетов.АВК КАК АВК,
		|	ПродажиБилетов.ДатаПродажи КАК ДатаПродажи,
		|	ПродажиБилетов.ДатаВылета КАК ДатаВылета,
		|	ПродажиБилетов.Итого КАК Итого,
		|	ПродажиБилетов.АГС КАК АГС,
		|	ПродажиБилетов.Тариф КАК Тариф,
		|	ПродажиБилетов.АГН КАК АГН,
		|	ПродажиБилетов.СУБ КАК СУБ,
		|	ПродажиБилетов.СуммаОтАВК КАК СуммаОтАВК,
		|	ПродажиБилетов.СуммаСУБ КАК СуммаСУБ,
		|	ПродажиБилетов.Билет КАК Билет,
		|	ПродажиБилетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ВТ_Продажи
		|ИЗ
		|	РегистрНакопления.ПродажиБилетов КАК ПродажиБилетов
		|ГДЕ
		|	ПродажиБилетов.Билет.МаскаБилета В (&МаскаБилета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Продажи.Субагент КАК Субагент,
		|	ВТ_Продажи.Направление КАК Направление,
		|	ВТ_Продажи.НомерБилета КАК НомерБилета,
		|	ВТ_Продажи.PNR КАК PNR,
		|	ВТ_Продажи.АВК КАК АВК,
		|	ВТ_Продажи.ДатаПродажи КАК ДатаПродажи,
		|	ВТ_Продажи.ДатаВылета КАК ДатаВылета,
		|	ВТ_Продажи.Итого КАК Итого,
		|	ВТ_Продажи.АГС КАК АГС,
		|	ВТ_Продажи.Тариф КАК Тариф,
		|	ВТ_Продажи.АГН КАК АГН,
		|	ВТ_Продажи.СУБ КАК СУБ,
		|	ВТ_Продажи.СуммаОтАВК КАК СуммаОтАВК,
		|	ВТ_Продажи.СуммаСУБ КАК СуммаСУБ,
		|	ВТ_Продажи.Билет КАК Билет,
		|	БилетРасшифровкаТекстаБилета.Покупатель КАК Покупатель,
		|	ВТ_Продажи.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	ВТ_Продажи КАК ВТ_Продажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Билет.РасшифровкаТекстаБилета КАК БилетРасшифровкаТекстаБилета
		|		ПО ВТ_Продажи.Билет = БилетРасшифровкаТекстаБилета.Ссылка";

	Запрос.УстановитьПараметр("МаскаБилета", МаскаБилета);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
КонецФункции

// Функция для возвратов курсов валют агенств
// 
// Параметры:
// 	СтруктураДанных
// 	ДляШтрафа
// Возвращаемое значение:
// 	Число - Описание
Функция ВозвратКурсаАгенств(СтруктураДанных, ДляШтрафа) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс КАК Курс
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
		|ГДЕ
		|	КурсыВалютСрезПоследних.Агенство = &Агенство
		|	И КурсыВалютСрезПоследних.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И КурсыВалютСрезПоследних.Период <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)";

	Запрос.УстановитьПараметр("Агенство", СтруктураДанных.Агенство);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", СтруктураДанных.Валюта);
	Если ДляШтрафа Тогда
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Иначе
		Запрос.УстановитьПараметр("Период", СтруктураДанных.ДатаПродаж);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Курс = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Курс = ВыборкаДетальныеЗаписи.Курс;
	КонецЦикла;
	Возврат Курс;

КонецФункции

// Функция для генерации направлений
// 
// Параметры:
// 	Отправление
// 	Прибытие
// 	АВК
// Возвращаемое значение:
// 	Неопределено, СправочникОбъект.Направления - Описание
Функция ГенерацияНаправлений(Отправление, Прибытие, АВК) Экспорт
	Направление = Неопределено;
	НаправлениеВозврат = ПоискОтправленийНазначений(Отправление, Прибытие);
	Проверка = ПоискСуществующихНаправлений(НаправлениеВозврат.Отправление, НаправлениеВозврат.Прибытие, АВК);
	Если Проверка <> Неопределено Тогда
		Направление = Проверка;
	Иначе
		Направление = Справочники.Направления.СоздатьЭлемент();
		Направление.Отправление = НаправлениеВозврат.Отправление;
		Направление.Прибытие = НаправлениеВозврат.Прибытие;
		Направление.Наименование = Строка(Отправление) + "-" + Строка(Прибытие);
		Направление.Код = Строка(Отправление) + Строка(Прибытие);
		Направление.Владелец = АВК;
		Направление.Записать();
	КонецЕсли;
	Возврат Направление;
КонецФункции

// Функция для поиска направлений
// 
// Параметры:
// 	Отправление - СправочникСсылка.Города - Описание
// 	Прибытие - СправочникСсылка.Города - Описание
// 	АВК
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ПоискСуществующихНаправлений(Отправление, Прибытие, АВК) Экспорт
	СтруктураПукнтов=ПоискОтправленийНазначений(Отправление,Прибытие);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Направления.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Направления КАК Направления
		|ГДЕ
		|	Направления.Отправление = &Отправление
		|	И Направления.Прибытие = &Прибытие
		|	И Направления.Владелец.Ссылка = &АВК";

	Запрос.УстановитьПараметр("АВК", АВК);
	Запрос.УстановитьПараметр("Отправление", СтруктураПукнтов.Отправление);
	Запрос.УстановитьПараметр("Прибытие", СтруктураПукнтов.Прибытие);

	РезультатЗапроса = Запрос.Выполнить();
	Направление = Неопределено;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Направление = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	Возврат Направление;
КонецФункции

// Функция для поиска пунктов и генерации
// 
// Параметры:
// 	Отправление
// 	Прибытие
// Возвращаемое значение:
// 	Структура - Описание:
// * Отправление - СправочникСсылка.Города -
// * Прибытие - СправочникСсылка.Города -
Функция ПоискОтправленийНазначений(Отправление, Прибытие) Экспорт
	СтруктураВозврата = Новый Структура;
	ПоискПоНаименованию = Справочники.Города.НайтиПоНаименованию(Отправление);
	ПоискПоКоду = Справочники.Города.НайтиПоКоду(Отправление);
	Если НЕ ПоискПоНаименованию = Справочники.Города.ПустаяСсылка() Тогда
		СтруктураВозврата.Вставить("Отправление", ПоискПоНаименованию);
	ИначеЕсли НЕ ПоискПоКоду = Справочники.Города.ПустаяСсылка() Тогда
		СтруктураВозврата.Вставить("Отправление", ПоискПоКоду);
	ИначеЕсли ПоискПоНаименованию = Справочники.Города.ПустаяСсылка()
			И ПоискПоКоду = Справочники.Города.ПустаяСсылка() Тогда
		Спр = Справочники.Города.СоздатьЭлемент();
		Спр.Код = Отправление;
		Спр.Наименование = Отправление;
		Спр.Записать();
		СтруктураВозврата.Вставить("Отправление", Спр.Ссылка);
	КонецЕсли;

	ПоискПоНаименованиюПр = Справочники.Города.НайтиПоНаименованию(Прибытие);
	ПоискПоКодуПр = Справочники.Города.НайтиПоКоду(Прибытие);
	Если НЕ ПоискПоНаименованиюПр = Справочники.Города.ПустаяСсылка() Тогда
		СтруктураВозврата.Вставить("Прибытие", ПоискПоНаименованиюПр);
	ИначеЕсли НЕ ПоискПоКодуПр = Справочники.Города.ПустаяСсылка() Тогда
		СтруктураВозврата.Вставить("Прибытие", ПоискПоКодуПр);
	ИначеЕсли ПоискПоНаименованиюПр = Справочники.Города.ПустаяСсылка()
			И ПоискПоКодуПр = Справочники.Города.ПустаяСсылка() Тогда
		Спр = Справочники.Города.СоздатьЭлемент();
		Спр.Код = Прибытие;
		Спр.Наименование = Прибытие;
		Спр.Записать();
		СтруктураВозврата.Вставить("Прибытие", Спр.Ссылка);
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

// Функция для проверки справочника Пульт на предмет ведения взаиморасчетов в ин. валюте
// 
// Параметры:
// 	Валидатор
// 	Агенство
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ВедутсяВзаиморасчетыВВалюте(Валидатор, Агенство) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Пульт.ВзаиморасчетыВВалюте
		|ИЗ
		|	Справочник.Пульт КАК Пульт
		|ГДЕ
		|	Пульт.Владелец = &Владелец
		|	И Пульт.Код = &Код";

	Запрос.УстановитьПараметр("Код", Валидатор);
	Запрос.УстановитьПараметр("Владелец", Агенство);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	РезультатФункции = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции = ВыборкаДетальныеЗаписи.ВзаиморасчетыВВалюте;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции
#КонецОбласти