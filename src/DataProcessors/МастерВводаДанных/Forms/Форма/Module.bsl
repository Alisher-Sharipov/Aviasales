

// Серверная процедура предназначена для отправки текстовых данных тело билета для их последующей генерации 
// 
// Параметры:
// 	СтруктураОтправки - Структура - Описание:
// * Кассир 
// * Курс 
// * Конвертация 
// * СтроковыеДанные - Строка -
// Возвращаемое значение:
// 	Булево - Описание
&НаСервере
Функция ДанныеБуфераПриИзмененииНаСервере(СтруктураОтправки)
	ОбработкаТекстовыхДанных.ПолучениеДанныхИзМассива(СтруктураОтправки);
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	ДанныеФормы.ДанныеБуфера = "";
	ДанныеФормы.ВзаиморасчетыВедутся = Неопределено;
	ЗначениеВРеквизитФормы(ДанныеФормы, "Объект");
	Возврат Истина;
КонецФункции

&НаСервере
Функция ВозвратПредварительныхДанных(Стр)
	ДанныеВозврата = ОбработкаТекстовыхДанных.ПреварительныйВозврат(Стр);
	Возврат ДанныеВозврата;
КонецФункции

&НаКлиенте
Процедура ДанныеБуфераПриИзменении(Элемент)
	ДанныеФункции = ВозвратПредварительныхДанных(Объект.ДанныеБуфера);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВалютаВзаиморасчетов", ДанныеФункции.ВалютаВзаиморасчетов);
	ОткрытьФорму("Обработка.МастерВводаДанных.Форма.ВыборКассира", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

// Клиентская процедура для обработки данных формы ВыборКассира
// 
// Параметры:
// 	ИмяСобытия - Строка - Описание
// 	Параметр
// 	Источник
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СтруктураОтправки = Новый Структура;
	Если ИмяСобытия = "ПередачаКассира" Тогда
		СтруктураОтправки.Вставить("Кассир", Параметр[0]);
		СтруктураОтправки.Вставить("Курс", Параметр[1]);
		СтруктураОтправки.Вставить("Конвертация", Параметр[2]);
		СтруктураОтправки.Вставить("СтроковыеДанные", Элементы.ДанныеБуфера.ТекстРедактирования);
	КонецЕсли;
	ЗначениеФункции = ДанныеБуфераПриИзмененииНаСервере(СтруктураОтправки);
	Если ЗначениеФункции Тогда
		Элементы.СписокБилетов.Обновить();
	КонецЕсли;
КонецПроцедуры

// Клиентская процедура для создания справочников Билет из таблицы значений формы
// 
// Параметры:
// 	Команда - КомандаФормы - Описание
&НаКлиенте
Процедура Загрузить(Команда)
	ЗагрузитьНаСервере();
	Элементы.ТабличныйДокумент.Видимость = Истина;
	Элементы.ОтчетПоБилетам.Видимость = Ложь;
КонецПроцедуры

// Серверная процедура для создания справочника из таблицы значений формы
// 
// Параметры:
&НаСервере
Процедура ЗагрузитьНаСервере()
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	Для каждого СтрНТ из ДанныеФормы.ОтчетПоБилетам Цикл
		НовыйСправочник = Справочники.Билет.СоздатьЭлемент();
		НовыйСправочник.Кассир = СтрНТ.Субагент;
		НовыйСправочник.КодАвиакомпании = СтрНТ.АВК;
		НовыйСправочник.НомерБилета = СтрНТ._Билета;
		НовыйСправочник.МаскаБилета = Строка(СтрНТ.АВК) + СтрНТ._Билета;
		СтрТабСпр = НовыйСправочник.РасшифровкаТекстаБилета.Добавить();
		СтрТабСпр.PNR = СтрНТ.PNR;
		СтрТабСпр.Выписан = СтрНТ.ДАТАПРОД_;
		СтрТабСпр.ДатаВылета = СтрНТ.ДАТАВЫЛ_;
		СтрТабСпр.ИтогоСумма = СтрНТ.Итого;
		СтрТабСпр.Покупатель = "";
		СтрТабСпр.Направление = СтрНТ.Направление;
		СтрТабСпр.Сборы = СтрНТ.АГС;
		СтрТабСпр.СтатусБилета = Перечисления.СтатусБилета.О;
		СтрТабСпр.СуммаТарифа = СтрНТ.ТАРИФ;
		СтрТабСпр.КурсВалют = СтрНТ.Курс;
		СтрТабСпр.Валидатор = СтрНТ.Пульт;
		Если СтрНТ.ВАЛ_ВЗАИМ = Неопределено
				или СтрНТ.ВАЛ_ВЗАИМ = Справочники.Валюта.ПустаяСсылка() Тогда
			СтрТабСпр.ВалютаВзаиморасчетов = СтрНТ.Валюта;
			СтрТабСпр.ВалютаЭквивалент = СтрНТ.Валюта;
		Иначе
			СтрТабСпр.ВалютаВзаиморасчетов = СтрНТ.Валюта;
			СтрТабСпр.ВалютаЭквивалент = СтрНТ.ВАЛ_ВЗАИМ;
		КонецЕсли;
		НовыйСправочник.Записать();
		Сообщить(НовыйСправочник.Ссылка);
	КонецЦикла;
	ДанныеФормы.ОтчетПоБилетам.Очистить();
	ЗначениеВРеквизитФормы(ДанныеФормы, "Объект");
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	ТабДок = ДанныеФормы.ТабличныйДокумент;
	Макет = Обработки.МастерВводаДанных.ПолучитьМакет("Макет");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Шапка);
	Данные = Макет.ПолучитьОбласть("Данные");
	ТабДок.Вывести(Данные);
	ЗначениеВРеквизитФормы(ДанныеФормы, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры

// Серверная процедура для отображения в форме полученных данных от процедуры "ПодготовкаДанных()"
// 
// Параметры:
&НаСервере
Процедура ПроверитьНаСервере()
	НоваяТаблица = ПодготовкаДанных();
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	ДанныеФормы.ОтчетПоБилетам.Загрузить(НоваяТаблица);
	Для Каждого СтрТаб из ДанныеФормы.ОтчетПоБилетам Цикл
		Если СтрТаб._АГН = 0 или СтрТаб._АГН = НЕОПРЕДЕЛЕНО Тогда
			СтрТаб.АГН = 0;
		КонецЕсли;
		Если СтрТаб._СУБ = 0 или СтрТаб._СУБ = Неопределено Тогда
			СтрТаб.СУБ = 0;
		КонецЕсли;
	КонецЦикла;
	//ТабДокумент=ДанныеФормы.ТабличныйДокумент;	
	//	ТабДокумент.Очистить();
	//	Макет=Обработки.МастерВводаДанных.ПолучитьМакет("Макет");
	//	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	//	ОбластьДанные=Макет.ПолучитьОбласть("Данные");
	//	ТабДокумент.Вывести(ОбластьШапка);
	//	Если НоваяТаблица<>Ложь Тогда
	//	Для каждого СтрЗаполнения из НоваяТаблица Цикл
	//		//ОбластьДанные.ПАРАМЕТРЫ.ЗАПОЛНИТЬ(СтрЗаполнения);
	//		ОбластьДанные.Параметры._АГН=СтрЗаполнения._АГН;
	//		ОбластьДанные.Параметры._СУБ=СтрЗаполнения._СУБ;
	//		ОбластьДанные.Параметры.СУБАГЕНТ=СтрЗаполнения.СУБАГЕНТ;
	//		ОбластьДанные.Параметры.PNR=СтрЗаполнения.PNR;
	//		ОбластьДанные.Параметры.АВК=СтрЗаполнения.АВК;
	//		ОбластьДанные.Параметры._БИЛЕТА=СтрЗаполнения._БИЛЕТА;
	//		ОбластьДанные.Параметры.ДАТАПРОД_=СтрЗаполнения.ДАТАПРОД_;
	//		ОбластьДанные.Параметры.ДАТАВЫЛ_=СтрЗаполнения.ДАТАВЫЛ_;
	//		ОбластьДанные.Параметры.НАПРАВЛЕНИЕ=СтрЗаполнения.НАПРАВЛЕНИЕ;
	//		ОбластьДанные.Параметры.ИТОГО=СтрЗаполнения.ИТОГО;
	//		ОбластьДанные.Параметры.АГС=СтрЗаполнения.АГС;
	//		ОбластьДанные.Параметры.АГЕНСТВО=СтрЗаполнения.АГЕНСТВО;
	//		ОбластьДанные.Параметры.ТАРИФ=СтрЗаполнения.ТАРИФ;
	//		ОбластьДанные.Параметры.АГН=СтрЗаполнения.АГН;
	//		ОбластьДанные.Параметры.СУБ=СтрЗаполнения.СУБ;
	//		ОбластьДанные.Параметры.ПУЛЬТ=СтрЗаполнения.ПУЛЬТ;
	//		ОбластьДанные.Параметры.ПРИМЕЧ=СтрЗаполнения.ПРИМЕЧ;
	//		ОбластьДанные.Параметры.АГНИСП=СтрЗаполнения.АГНИСП;
	//		ОбластьДанные.Параметры.СУБИСП=СтрЗаполнения.СУБИСП;
	//		ОбластьДанные.Параметры.Валюта=СтрЗаполнения.Валюта;
	//		ОбластьДанные.Параметры.ВАЛЮТАВЗ=СтрЗаполнения.ВАЛ_ВЗАИМ;
	//		ОбластьДанные.Параметры.КУРС=СтрЗаполнения.КУРС;
	//		ТабДокумент.Вывести(ОбластьДанные);
	//	КонецЦикла;
	//	
	//	ТабДокумент.ФиксацияСверху=1;
	ЗначениеВРеквизитФормы(ДанныеФормы, "Объект");
	//КонецЕсли;
КонецПроцедуры

// Серверная процедура для возврата таблицы значений из обработанного табличного документа
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * _АГН 
// * _СУБ 
// * СУБАГЕНТ 
// * PNR - String -
// * АВК 
// * _БИЛЕТА 
// * ДАТАПРОД_ 
// * ДАТАВЫЛ_ 
// * НАПРАВЛЕНИЕ 
// * ИТОГО 
// * АГС 
// * АГЕНСТВО 
// * ТАРИФ 
// * АГН 
// * СУБ 
// * ПУЛЬТ 
// * ПРИМЕЧ - String -
// * АГНИСП - String -
// * СУБИСП - String -
// * Валюта 
// * ВАЛ_ВЗАИМ 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
// * КУРС 
&НаСервере
Функция ПодготовкаДанных()
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	СозданиеНаправленийИКлючейАналитики();
	КодАналитики = Неопределено;
	ТабДокумент = ДанныеФормы.ТабличныйДокумент;
	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("_АГН", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("_СУБ", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("СУБАГЕНТ", Новый ОписаниеТипов("СправочникСсылка.Кассир"));
	НоваяТаблица.Колонки.Добавить("PNR", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("АВК", Новый ОписаниеТипов("СправочникСсылка.Авиакомпания"));
	НоваяТаблица.Колонки.Добавить("_БИЛЕТА", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("ДАТАПРОД_", Новый ОписаниеТипов("ДАТА"));
	НоваяТаблица.Колонки.Добавить("ДАТАВЫЛ_", Новый ОписаниеТипов("ДАТА"));
	НоваяТаблица.Колонки.Добавить("НАПРАВЛЕНИЕ", Новый ОписаниеТипов("СправочникСсылка.Направления"));
	НоваяТаблица.Колонки.Добавить("ИТОГО", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("АГС", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("АГЕНСТВО", Новый ОписаниеТипов("СправочникСсылка.Агенство"));
	НоваяТаблица.Колонки.Добавить("ТАРИФ", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("АГН", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("СУБ", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("ПУЛЬТ", Новый ОписаниеТипов("СправочникСсылка.Пульт"));
	НоваяТаблица.Колонки.Добавить("ПРИМЕЧ", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("АГНИСП", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("СУБИСП", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюта"));
	НоваяТаблица.Колонки.Добавить("ВАЛ_ВЗАИМ", Новый ОписаниеТипов("СправочникСсылка.Валюта"));
	НоваяТаблица.Колонки.Добавить("КУРС", Новый ОписаниеТипов("ЧИСЛО"));
	Для каждого Стр из ТабЗначений Цикл
		НоваяСтрока = НоваяТаблица.Добавить();
		НоваяСтрока.PNR = Стр.PNR;
		НоваяСтрока.ПРИМЕЧ = Стр.ПРИМЕЧ;
		НоваяСтрока._Билета = ЧИСЛО(Стр._Билета);

		Если СтрНайти(Стр.ДАТАПРОД_, "/") > 0 Тогда
			НоваяСтрока.ДАТАПРОД_ = ДАТА(СтрЗаменить(Стр.ДАТАПРОД_, "/", ""));
		ИначеЕсли СтрНайти(Стр.ДАТАПРОД_, "-") > 0 Тогда
			НоваяСтрока.ДАТАПРОД_ = ДАТА(СтрЗаменить(Стр.ДАТАПРОД_, "-", ""));
		ИначеЕсли СтрНайти(Стр.ДАТАПРОД_, ".") > 0 Тогда
			НоваяСтрока.ДАТАПРОД_ = ДАТА(СтрЗаменить(Стр.ДАТАПРОД_, ".", ""));
		ИначеЕсли СтрНайти(Стр.ДАТАПРОД_, ",") > 0 Тогда
			НоваяСтрока.ДАТАПРОД_ = ДАТА(СтрЗаменить(Стр.ДАТАПРОД_, ",", ""));
		КонецЕсли;

		Если СтрНайти(Стр.ДАТАВЫЛ_, "/") > 0 Тогда
			НоваяСтрока.ДАТАВЫЛ_ = ДАТА(СтрЗаменить(Стр.ДАТАВЫЛ_, "/", ""));
		ИначеЕсли СтрНайти(Стр.ДАТАВЫЛ_, "-") > 0 Тогда
			НоваяСтрока.ДАТАВЫЛ_ = ДАТА(СтрЗаменить(Стр.ДАТАВЫЛ_, "-", ""));
		ИначеЕсли СтрНайти(Стр.ДАТАВЫЛ_, ".") > 0 Тогда
			НоваяСтрока.ДАТАВЫЛ_ = ДАТА(СтрЗаменить(Стр.ДАТАВЫЛ_, ".", ""));
		ИначеЕсли СтрНайти(Стр.ДАТАВЫЛ_, ",") > 0 Тогда
			НоваяСтрока.ДАТАВЫЛ_ = ДАТА(СтрЗаменить(Стр.ДАТАВЫЛ_, ",", ""));
		КонецЕсли;

		Если Стр.Пульт = "" Тогда
			НоваяСтрока.Агенство = МодульПроведенияНаСервере.ВозвратАгенстваПоИмени(Стр.Агенство);
			НоваяСтрока.Пульт = Стр.Пульт;
		Иначе
			НоваяСтрока.Агенство = МодульПроведенияНаСервере.НайтиПульт(Стр.ПУЛЬТ);
			НоваяСтрока.Пульт = Справочники.Пульт.НайтиПоКоду(Стр.Пульт, , , НоваяСтрока.Агенство);
		КонецЕсли;

		НоваяСтрока.СУБАГЕНТ = Справочники.Кассир.НайтиПоНаименованию(Стр.СУБАГЕНТ);
		НоваяСтрока.АВК = Справочники.Авиакомпания.НайтиПоНаименованию(Стр.АВК);
		ВременнаяСтрока = СтрЗаменить(Стр.Направление, "-", "");
		Отправление = Сред(ВременнаяСтрока, 1, 3);
		Назначение = Сред(ВременнаяСтрока, 4, 3);
		СтруктураПунктов = МодульПроведенияНаСервере.ПоискОтправленийНазначений(Отправление, Назначение);
		НаправлениеАВК = МодульПроведенияНаСервере.ПоискСуществующихНаправлений(СтруктураПунктов.Отправление, СтруктураПунктов.Прибытие, НоваяСтрока.АВК);
		Если НаправлениеАВК = Неопределено Тогда
			НаправлениеАВК = МодульПроведенияНаСервере.ГенерацияНаправлений(СтруктураПунктов.Отправление, СтруктураПунктов.Прибытие, НоваяСтрока.АВК);
		КонецЕсли;
		НоваяСтрока.НАПРАВЛЕНИЕ = НаправлениеАВК;
		КодАналитики = Строка(НоваяСтрока.АВК) + Строка(НоваяСтрока.НАПРАВЛЕНИЕ)
			+ Строка(НоваяСтрока.АГЕНСТВО);
		СтруктураОтправки = Новый Структура;
		СтруктураОтправки.Вставить("АВК", НоваяСтрока.АВК);
		СтруктураОтправки.Вставить("Направление", НаправлениеАВК);
		СтруктураОтправки.Вставить("Процент", ЧИСЛО(Стр._АГН));
		СтруктураОтправки.Вставить("Период", ТекущаяДата());
		МодульПроведенияНаСервере.РегистрацииКлючейАналитики(СтруктураОтправки, НоваяСтрока.Агенство, "ПроверкаВОбработке");
		НоваяСтрока._АГН = МодульПроведенияНаСервере.ВозвратПроцентовАГН(КодАналитики, НоваяСтрока.ДАТАПРОД_);
		НоваяСтрока._СУБ = МодульПроведенияНаСервере.ВозвратПроцентовСУБ(КодАналитики, НоваяСтрока.СУБАГЕНТ, НоваяСтрока.ДАТАПРОД_);
		НоваяСтрока.Валюта = Справочники.Валюта.НайтиПоНаименованию(Стр.Валюта);
		НоваяСтрока.ВАЛ_ВЗАИМ = Справочники.Валюта.НайтиПоНаименованию(Стр.ВАЛ_ВЗАИМ);
		Если НоваяСтрока._АГН = ЧИСЛО(Стр._АГН) / 100 Тогда
			НоваяСтрока.АГНИСП = "Правильно";
		Иначе
			НоваяСтрока.АГНИСП = Стр._АГН;
		КонецЕсли;
		Если НоваяСтрока._СУБ = ЧИСЛО(Стр._СУБ) / 100 Тогда
			НоваяСтрока.СУБИСП = "Правильно";
		Иначе
			НоваяСтрока.СУБИСП = Стр._АГН;
		КонецЕсли;
		НоваяСтрока.ИТОГО = ЧИСЛО(Стр.ИТОГО);
		НоваяСтрока.АГС = ЧИСЛО(Стр.АГС);
		НоваяСтрока.ТАРИФ = ЧИСЛО(Стр.ТАРИФ);
		НоваяСтрока.АГН = ЧИСЛО(Стр.АГН);
		НоваяСтрока.СУБ = ЧИСЛО(Стр.СУБ);
		ВВалюте=МодульПроведенияНаСервере.ВедутсяВзаиморасчетыВВалюте(НоваяСтрока.Пульт,НоваяСтрока.Агенство);
		Если Стр.ВАЛ_ВЗАИМ = "" ИЛИ НЕ ВВалюте=ЛОЖЬ Тогда
			НоваяСтрока.Курс = 1;
		Иначе
			НоваяСтрока.Курс = ЧИСЛО(Стр.Курс);
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяТаблица;
КонецФункции

// Серверная процедура предназначена для предварительной генерации ключей аналитики и направлений
// 
// Параметры:
&НаСервере
Процедура СозданиеНаправленийИКлючейАналитики()
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	ТабДокумент = ДанныеФормы.ТабличныйДокумент;
	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("АВК", Новый ОписаниеТипов("СправочникСсылка.Авиакомпания"));
	НоваяТаблица.Колонки.Добавить("НАПРАВЛЕНИЕ", Новый ОписаниеТипов("СправочникСсылка.Направления"));
	НоваяТаблица.Колонки.Добавить("АГЕНСТВО", Новый ОписаниеТипов("СправочникСсылка.Агенство"));
	НоваяТаблица.Колонки.Добавить("ПУЛЬТ", Новый ОписаниеТипов("СправочникСсылка.Пульт"));
	Для каждого Стр из ТабЗначений Цикл
		НоваяСтрока = НоваяТаблица.Добавить();
		Если Стр.Пульт = "" Тогда
			НоваяСтрока.Агенство = МодульПроведенияНаСервере.ВозвратАгенстваПоИмени(Стр.Агенство);
			НоваяСтрока.Пульт = Стр.Пульт;
		Иначе
			НоваяСтрока.Агенство = МодульПроведенияНаСервере.НайтиПульт(Стр.ПУЛЬТ);
			НоваяСтрока.Пульт = Справочники.Пульт.НайтиПоКоду(Стр.Пульт, , , НоваяСтрока.Агенство);
		КонецЕсли;
		НоваяСтрока.АВК = Справочники.Авиакомпания.НайтиПоНаименованию(Стр.АВК);
		ВременнаяСтрока = СтрЗаменить(Стр.Направление, "-", "");
		Отправление = Сред(ВременнаяСтрока, 1, 3);
		Назначение = Сред(ВременнаяСтрока, 4, 3);
		НаправлениеАВК = МодульПроведенияНаСервере.ПоискСуществующихНаправлений(Отправление, Назначение, НоваяСтрока.АВК);
		Если НаправлениеАВК = Неопределено Тогда
			ВременнаяСтрока = СтрЗаменить(Стр.Направление, "-", "");
			Отправление = Сред(ВременнаяСтрока, 1, 3);
			Назначение = Сред(ВременнаяСтрока, 4, 3);
			НаправлениеАвк = МодульПроведенияНаСервере.ГенерацияНаправлений(Отправление, Назначение, НоваяСтрока.АВК);
			НоваяСтрока.НАПРАВЛЕНИЕ = НаправлениеАВК;
		Иначе
			НоваяСтрока.НАПРАВЛЕНИЕ = НаправлениеАВК;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Клиентская процедура проверки данных вставленных из буфера в табличный документ
// 
// Параметры:
// 	Команда - КомандаФормы - Описание
&НаКлиенте
Процедура Проверить(Команда)
	Объект.ФлагНажатия = Истина;
	ПроверитьНаСервере();
	Элементы.ТабличныйДокумент.Видимость = Ложь;
	Элементы.ОтчетПоБилетам.Видимость = Истина;
	Элементы.ЗагрузитьФайлОтчета.Доступность = Ложь;
	Элементы.ПересчитатьСтавку.Доступность = Истина;
КонецПроцедуры

// Серверная проедура очистки табличного документа формы
// 
// Параметры:
&НаСервере
Процедура ОчиститьТаблицуНаСервере()
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	ДанныеФормы.ТабличныйДокумент.Очистить();
	ЗначениеВРеквизитФормы(ДанныеФормы, "Объект");
	ПриОткрытииНаСервере();
КонецПроцедуры

// Клиентская процедура очистки табличного документа
// 
// Параметры:
// 	Команда - КомандаФормы - Описание
&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	Объект.ФлагНажатия = Ложь;
	ОчиститьТаблицуНаСервере();
	Элементы.ЗагрузитьФайлОтчета.Доступность = Истина;
	Элементы.ОтчетПоБилетам.Видимость = Ложь;
	Элементы.ТабличныйДокумент.Видимость = Истина;
	Элементы.ПересчитатьСтавку.Доступность = Ложь;
КонецПроцедуры

// Данная процедура предназначена для обработки изменения строки Валюты продаж
// 
// Параметры:
// 	Элемент - ПолеФормы - Описание
&НаКлиенте
Процедура ОтчетПоБилетамВалютаПриИзменении(Элемент)
	Данные = Элементы.ОтчетПоБилетам.ТекущиеДанные;
	КурсФункции = ПроверкаВалютИВозвратКурса(Данные.Валюта, Данные.ВАЛ_ВЗАИМ);
	Данные.Курс = КурсФункции;
КонецПроцедуры

// Данная функция предназначена для проверки результатов изменения строки Валюта и Валюта взаиморасчетов и возврата курса валют
// 
// Параметры:
// 	Валюта
// 	ВалютаВзаим
// Возвращаемое значение:
// 	Неопределено, Число - Описание
&НаСервереБезКонтекста
Функция ПроверкаВалютИВозвратКурса(Валюта, ВалютаВзаим)
	Курс = Неопределено;
	Если Валюта = ВалютаВзаим Тогда
		Курс = 1;
	ИначеЕсли Валюта <> ВалютаВзаим тогда
		Курс = 0;
	КонецЕсли;
	Возврат Курс;
КонецФункции

// Данная процедура предназначена для обработки изменения строки Валюты взаиморасчетов
// 
// Параметры:
// 	Элемент - ПолеФормы - Описание
&НаКлиенте
Процедура ОтчетПоБилетамВАЛ_ВЗАИМПриИзменении(Элемент)
	Данные = Элементы.ОтчетПоБилетам.ТекущиеДанные;
	КурсФункции = ПроверкаВалютИВозвратКурса(Данные.Валюта, Данные.ВАЛ_ВЗАИМ);
	Данные.Курс = КурсФункции;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоБилетамАГНПриИзменении(Элемент)
//Тариф*АГН/100
	Данные = Элементы.ОтчетПоБилетам.ТекущиеДанные;
	Данные.АГН = (Данные.Тариф * Данные._АГН) / 100;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоБилетамСУБПриИзменении(Элемент)
	Данные = Элементы.ОтчетПоБилетам.ТекущиеДанные;
	Данные.СУБ = (Данные.Тариф * Данные._СУБ) / 100;
КонецПроцедуры

// Серверная процедура для пересчета процентных ставок
// 
// Параметры:
&НаСервере
Процедура ПересчитатьСтавкуНаСервере()
	Данные = РеквизитФормыВЗначение("Объект");
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("_АГН", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("_СУБ", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("СУБАГЕНТ", Новый ОписаниеТипов("СправочникСсылка.Кассир"));
	НоваяТаблица.Колонки.Добавить("PNR", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("АВК", Новый ОписаниеТипов("СправочникСсылка.Авиакомпания"));
	НоваяТаблица.Колонки.Добавить("_БИЛЕТА", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("ДАТАПРОД_", Новый ОписаниеТипов("ДАТА"));
	НоваяТаблица.Колонки.Добавить("ДАТАВЫЛ_", Новый ОписаниеТипов("ДАТА"));
	НоваяТаблица.Колонки.Добавить("НАПРАВЛЕНИЕ", Новый ОписаниеТипов("СправочникСсылка.Направления"));
	НоваяТаблица.Колонки.Добавить("ИТОГО", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("АГС", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("АГЕНСТВО", Новый ОписаниеТипов("СправочникСсылка.Агенство"));
	НоваяТаблица.Колонки.Добавить("ТАРИФ", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("АГН", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("СУБ", Новый ОписаниеТипов("ЧИСЛО"));
	НоваяТаблица.Колонки.Добавить("ПУЛЬТ", Новый ОписаниеТипов("СправочникСсылка.Пульт"));
	НоваяТаблица.Колонки.Добавить("ПРИМЕЧ", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("АГНИСП", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("СУБИСП", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюта"));
	НоваяТаблица.Колонки.Добавить("ВАЛ_ВЗАИМ", Новый ОписаниеТипов("СправочникСсылка.Валюта"));
	НоваяТаблица.Колонки.Добавить("КУРС", Новый ОписаниеТипов("ЧИСЛО"));

	Для каждого СтрТаб из Данные.ОтчетПоБилетам Цикл

		Ключь = Строка(СтрТаб.АВК) + Строка(СтрТаб.Направление)
			+ Строка(СтрТаб.АГЕНСТВО);
		НоваяСтрока = НоваяТаблица.Добавить();
		НоваяСтрока._АГН = МодульПроведенияНаСервере.ВозвратПроцентовАГН(Ключь, СтрТаб.ДАТАПРОД_);
		НоваяСтрока._СУБ = МодульПроведенияНаСервере.ВозвратПроцентовСУБ(Ключь, СтрТаб.СУБАГЕНТ, СтрТаб.ДАТАПРОД_);
		НоваяСтрока.АГН = СтрТаб.Тариф * СтрТаб._АГН;
		НоваяСтрока.СУБ = СтрТаб.Тариф * СтрТаб._СУБ;
		НоваяСтрока.СУБАГЕНТ = СтрТаб.СУБАГЕНТ;
		НоваяСтрока.PNR = СтрТаб.PNR;
		НоваяСтрока.АВК = СтрТаб.АВК;
		НоваяСтрока._БИЛЕТА = СтрТаб._БИЛЕТА;
		НоваяСтрока.ДАТАПРОД_ = СтрТаб.ДАТАПРОД_;
		НоваяСтрока.ДАТАВЫЛ_ = СтрТаб.ДАТАВЫЛ_;
		НоваяСтрока.НАПРАВЛЕНИЕ = СтрТаб.НАПРАВЛЕНИЕ;
		НоваяСтрока.ИТОГО = СтрТаб.ИТОГО;
		НоваяСтрока.АГС = СтрТаб.АГС;
		НоваяСтрока.АГЕНСТВО = СтрТаб.АГЕНСТВО;
		НоваяСтрока.ТАРИФ = СтрТаб.ТАРИФ;
		НоваяСтрока.ПУЛЬТ = СтрТаб.ПУЛЬТ;
		НоваяСтрока.Валюта = СтрТаб.Валюта;
		НоваяСтрока.ВАЛ_ВЗАИМ = СтрТаб.ВАЛ_ВЗАИМ;
		НоваяСтрока.КУРС = СтрТаб.КУРС;
//		НоваяСтрока.Примечание = СтрТаб.ПРИМЕЧ;
	КонецЦикла;
	Данные.ОтчетПоБилетам.Загрузить(НоваяТаблица);
	ЗначениеВРеквизитФормы(Данные, "Объект");
КонецПроцедуры

// Клиентская процедура для пересчета процентных ставок
// 
// Параметры:
// 	Команда - КомандаФормы - Описание
&НаКлиенте
Процедура ПересчитатьСтавку(Команда)
	ПересчитатьСтавкуНаСервере();
КонецПроцедуры
